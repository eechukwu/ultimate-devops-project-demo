name: "Destroy AWS Resources"

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm deletion of resources'
        required: true
        type: string

env:
  AWS_REGION: eu-west-2
  TERRAFORM_DIR: ./terraform

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    name: "Destroy Infrastructure"
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'DESTROY'

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up AWS credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Install Terraform on the runner
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      # Step 4: Initialize Terraform and ensure state access
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          # Show the current working directory and its contents
          pwd
          ls -la
          
          # Initialize with detailed logging
          TF_LOG=DEBUG terraform init
          
          # Show current state
          echo "Current Terraform State:"
          terraform state list || echo "No state found or cannot access state"

      # Step 5: Plan destruction to verify state access
      - name: Verify Resources to Destroy
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "Resources targeted for destruction:"
          terraform plan -destroy
          
          # Check if any resources are in state
          RESOURCE_COUNT=$(terraform state list | wc -l)
          if [ "$RESOURCE_COUNT" -eq "0" ]; then
            echo "WARNING: No resources found in Terraform state!"
            echo "Either resources are already destroyed or state is not accessible."
          fi

      # Step 6: Destroy resources
      - name: Terraform Destroy
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "Beginning destruction..."
          terraform destroy -auto-approve