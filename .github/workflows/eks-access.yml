name: "EKS Access Management"

on:
  workflow_call:
    inputs:
      cluster_name:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  TERRAFORM_DIR: ./terraform
  MAX_RETRIES: 3
  TF_VERSION: "1.5.0"

jobs:
  configure-access:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # Get role ARNs from AWS
      - name: Get Role ARNs
        run: |
          # First get the nodegroup name
          NODEGROUP_NAME=$(aws eks list-nodegroups \
            --cluster-name ${{ inputs.cluster_name }} \
            --query 'nodegroups[0]' \
            --output text)
          
          echo "Nodegroup name: ${NODEGROUP_NAME}"
          
          # Get node role using nodegroup name
          NODE_ROLE=$(aws eks describe-nodegroup \
            --cluster-name ${{ inputs.cluster_name }} \
            --nodegroup-name ${NODEGROUP_NAME} \
            --query 'nodegroup.nodeRole' \
            --output text)
          
          echo "NODE_ROLE=${NODE_ROLE}" >> $GITHUB_ENV
          
          # Get other roles
          ADMIN_ROLE=$(aws iam list-roles --query "Roles[?contains(RoleName, 'eks-admin')].Arn" --output text)
          DEV_ROLE=$(aws iam list-roles --query "Roles[?contains(RoleName, 'eks-developer')].Arn" --output text)
          READONLY_ROLE=$(aws iam list-roles --query "Roles[?contains(RoleName, 'eks-readonly')].Arn" --output text)
          
          # Store roles in environment
          echo "ADMIN_ROLE=${ADMIN_ROLE}" >> $GITHUB_ENV
          echo "DEV_ROLE=${DEV_ROLE}" >> $GITHUB_ENV
          echo "READONLY_ROLE=${READONLY_ROLE}" >> $GITHUB_ENV
          
          # Print for verification
          echo "Found roles:"
          echo "Node Role: ${NODE_ROLE}"
          echo "Admin Role: ${ADMIN_ROLE}"
          echo "Dev Role: ${DEV_ROLE}"
          echo "Readonly Role: ${READONLY_ROLE}"
          
          # Verify roles exist
          if [ -z "${NODE_ROLE}" ] || [ -z "${ADMIN_ROLE}" ] || [ -z "${DEV_ROLE}" ] || [ -z "${READONLY_ROLE}" ]; then
            echo "Error: One or more required roles not found"
            exit 1
          fi

      - name: Configure kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          aws eks update-kubeconfig \
            --name ${{ inputs.cluster_name }} \
            --region ${{ env.AWS_REGION }} \
            --role-arn ${{ secrets.AWS_ROLE_ARN }}
          
          kubectl get svc

      - name: Apply aws-auth ConfigMap
        run: |
          # Create temp ConfigMap
          cat << EOF > aws-auth-new.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: aws-auth
            namespace: kube-system
          data:
            mapRoles: |
              - rolearn: ${NODE_ROLE}
                username: system:node:{{EC2PrivateDNSName}}
                groups:
                  - system:bootstrappers
                  - system:nodes
              - rolearn: ${ADMIN_ROLE}
                username: admin-user
                groups:
                  - system:masters
                  - eks-admins
              - rolearn: ${DEV_ROLE}
                username: developer-user
                groups:
                  - eks-developers
              - rolearn: ${READONLY_ROLE}
                username: readonly-user
                groups:
                  - eks-readonly
          EOF
          
          # Verify ConfigMap syntax
          kubectl apply -f aws-auth-new.yaml --dry-run=client
          
          # Apply ConfigMap
          kubectl apply -f aws-auth-new.yaml
          
          # Verify application
          kubectl get configmap aws-auth -n kube-system -o yaml