name: "EKS Load Balancer Setup"

on:
  workflow_call:
    inputs:
      cluster_name:
        required: true
        type: string
      vpc_id:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  HELM_VERSION: "3.12.3"
  MAX_RETRIES: 3

jobs:
  setup-loadbalancer:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Tools
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          # Install Helm
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh --version v${HELM_VERSION}
          
          # Install eksctl
          EKSCTL_VERSION=$(curl -sL https://api.github.com/repos/weaveworks/eksctl/releases/latest | jq -r '.tag_name' | cut -c 2-)
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/v${EKSCTL_VERSION}/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig \
            --name ${{ inputs.cluster_name }} \
            --region ${{ env.AWS_REGION }}
          
          kubectl get svc

      - name: Configure Load Balancer
        run: |
          # Verify OIDC provider
          echo "Verifying OIDC provider..."
          eksctl utils associate-iam-oidc-provider \
            --cluster ${{ inputs.cluster_name }} \
            --region ${{ env.AWS_REGION }} \
            --approve

          # Create policy
          echo "Creating IAM policy..."
          curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
          
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam_policy.json || true

          # Get OIDC ID
          OIDC_ID=$(aws eks describe-cluster \
            --name ${{ inputs.cluster_name }} \
            --query "cluster.identity.oidc.issuer" \
            --output text | cut -d'/' -f5)

          # Create service account
          echo "Creating service account..."
          cat << EOF | kubectl apply -f -
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: aws-load-balancer-controller
            namespace: kube-system
            annotations:
              eks.amazonaws.com/role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/AmazonEKSLoadBalancerControllerRole
          EOF

          # Create IAM role
          echo "Creating IAM role..."
          aws iam create-role \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/oidc.eks.${{ env.AWS_REGION }}.amazonaws.com/id/'${OIDC_ID}'"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "oidc.eks.${{ env.AWS_REGION }}.amazonaws.com/id/'${OIDC_ID}':aud": "sts.amazonaws.com",
                      "oidc.eks.${{ env.AWS_REGION }}.amazonaws.com/id/'${OIDC_ID}':sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                    }
                  }
                }
              ]
            }' || true

          # Attach policy
          echo "Attaching policy..."
          aws iam attach-role-policy \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --policy-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicy || true

      - name: Install Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update eks

          # Clean up any existing deployment
          kubectl delete deployment -n kube-system aws-load-balancer-controller --ignore-not-found

          # Install controller
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=${{ inputs.cluster_name }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=${{ env.AWS_REGION }} \
            --set vpcId=${{ inputs.vpc_id }} \
            --wait \
            --timeout 5m

      - name: Verify Installation
        run: |
          echo "Waiting for deployment..."
          kubectl wait --for=condition=available --timeout=300s deployment/aws-load-balancer-controller -n kube-system

          echo "Pod status:"
          kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller

          echo "Checking logs:"
          kubectl logs -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller --tail=20