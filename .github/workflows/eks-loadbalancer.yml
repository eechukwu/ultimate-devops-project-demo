name: "EKS Load Balancer Setup"

on:
  workflow_call:
    inputs:
      cluster_name:
        required: true
        type: string
      vpc_id:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  HELM_VERSION: "3.12.3"
  MAX_RETRIES: 3

jobs:
  setup-loadbalancer:
    runs-on: ubuntu-latest

    steps:
      # Previous steps remain the same until Configure Load Balancer

      - name: Configure Load Balancer
        run: |
          # Set up OIDC provider
          echo "Setting up OIDC provider..."
          eksctl utils associate-iam-oidc-provider \
            --cluster ${{ inputs.cluster_name }} \
            --region ${{ env.AWS_REGION }} \
            --approve

          # Create IAM policy (ignore if exists)
          echo "Creating IAM policy..."
          curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
          
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam_policy.json || true

          # Delete existing service account if exists
          echo "Cleaning up existing service account..."
          kubectl delete serviceaccount -n kube-system aws-load-balancer-controller --ignore-not-found
          
          # Create service account manually
          echo "Creating Kubernetes service account..."
          cat << EOF | kubectl apply -f -
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: aws-load-balancer-controller
            namespace: kube-system
            annotations:
              eks.amazonaws.com/role-arn: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/AmazonEKSLoadBalancerControllerRole
          EOF

          # Create IAM role and attach policy
          echo "Creating IAM role..."
          aws iam create-role \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/oidc.eks.${{ env.AWS_REGION }}.amazonaws.com/id/'$(aws eks describe-cluster --name ${{ inputs.cluster_name }} --query "cluster.identity.oidc.issuer" --output text | cut -d'/' -f5)'"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "oidc.eks.${{ env.AWS_REGION }}.amazonaws.com/id/'$(aws eks describe-cluster --name ${{ inputs.cluster_name }} --query "cluster.identity.oidc.issuer" --output text | cut -d'/' -f5)':sub": "system:serviceaccount:kube-system:aws-load-balancer-controller"
                    }
                  }
                }
              ]
            }' || true

          # Attach policy to role
          echo "Attaching policy to role..."
          aws iam attach-role-policy \
            --role-name AmazonEKSLoadBalancerControllerRole \
            --policy-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicy || true

          # Verify service account
          echo "Verifying service account..."
          kubectl get serviceaccount aws-load-balancer-controller -n kube-system

      - name: Install Controller
        run: |
          echo "Adding Helm repository..."
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update eks

          echo "Installing Load Balancer Controller..."
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=${{ inputs.cluster_name }} \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set region=${{ env.AWS_REGION }} \
            --set vpcId=${{ inputs.vpc_id }} \
            --wait \
            --timeout 5m

      - name: Verify Installation
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/aws-load-balancer-controller -n kube-system

          echo "Checking pod status..."
          kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller